/**
 * @fileoverview gRPC-Web generated client stub for auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.0
// source: auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as auth_pb from './auth_pb'; // proto import: "auth.proto"


export class AuthClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    '/auth.Auth/Register',
    grpcWeb.MethodType.UNARY,
    auth_pb.RegisterRequest,
    auth_pb.RegisterResponse,
    (request: auth_pb.RegisterRequest) => {
      return request.serializeBinary();
    },
    auth_pb.RegisterResponse.deserializeBinary
  );

  register(
    request: auth_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.RegisterResponse>;

  register(
    request: auth_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.RegisterResponse) => void): grpcWeb.ClientReadableStream<auth_pb.RegisterResponse>;

  register(
    request: auth_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.RegisterResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.Auth/Register',
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.Auth/Register',
    request,
    metadata || {},
    this.methodDescriptorRegister);
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/auth.Auth/Login',
    grpcWeb.MethodType.UNARY,
    auth_pb.LoginRequest,
    auth_pb.LoginResponse,
    (request: auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    auth_pb.LoginResponse.deserializeBinary
  );

  login(
    request: auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LoginResponse>;

  login(
    request: auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LoginResponse>;

  login(
    request: auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.Auth/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.Auth/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorGetUser = new grpcWeb.MethodDescriptor(
    '/auth.Auth/GetUser',
    grpcWeb.MethodType.UNARY,
    auth_pb.GetUserRequest,
    auth_pb.GetUserResponse,
    (request: auth_pb.GetUserRequest) => {
      return request.serializeBinary();
    },
    auth_pb.GetUserResponse.deserializeBinary
  );

  getUser(
    request: auth_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.GetUserResponse>;

  getUser(
    request: auth_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.GetUserResponse) => void): grpcWeb.ClientReadableStream<auth_pb.GetUserResponse>;

  getUser(
    request: auth_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.GetUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.Auth/GetUser',
        request,
        metadata || {},
        this.methodDescriptorGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.Auth/GetUser',
    request,
    metadata || {},
    this.methodDescriptorGetUser);
  }

  methodDescriptorChangeIcon = new grpcWeb.MethodDescriptor(
    '/auth.Auth/ChangeIcon',
    grpcWeb.MethodType.UNARY,
    auth_pb.ChangeIconRequest,
    auth_pb.ChangeIconResponse,
    (request: auth_pb.ChangeIconRequest) => {
      return request.serializeBinary();
    },
    auth_pb.ChangeIconResponse.deserializeBinary
  );

  changeIcon(
    request: auth_pb.ChangeIconRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.ChangeIconResponse>;

  changeIcon(
    request: auth_pb.ChangeIconRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.ChangeIconResponse) => void): grpcWeb.ClientReadableStream<auth_pb.ChangeIconResponse>;

  changeIcon(
    request: auth_pb.ChangeIconRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.ChangeIconResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.Auth/ChangeIcon',
        request,
        metadata || {},
        this.methodDescriptorChangeIcon,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.Auth/ChangeIcon',
    request,
    metadata || {},
    this.methodDescriptorChangeIcon);
  }

  methodDescriptorChangeUsername = new grpcWeb.MethodDescriptor(
    '/auth.Auth/ChangeUsername',
    grpcWeb.MethodType.UNARY,
    auth_pb.ChangeUsernameRequest,
    auth_pb.ChangeUsernameResponse,
    (request: auth_pb.ChangeUsernameRequest) => {
      return request.serializeBinary();
    },
    auth_pb.ChangeUsernameResponse.deserializeBinary
  );

  changeUsername(
    request: auth_pb.ChangeUsernameRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.ChangeUsernameResponse>;

  changeUsername(
    request: auth_pb.ChangeUsernameRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.ChangeUsernameResponse) => void): grpcWeb.ClientReadableStream<auth_pb.ChangeUsernameResponse>;

  changeUsername(
    request: auth_pb.ChangeUsernameRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.ChangeUsernameResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.Auth/ChangeUsername',
        request,
        metadata || {},
        this.methodDescriptorChangeUsername,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.Auth/ChangeUsername',
    request,
    metadata || {},
    this.methodDescriptorChangeUsername);
  }

}

